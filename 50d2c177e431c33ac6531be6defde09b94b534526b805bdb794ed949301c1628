// Boster By 206source
// booster_show_connmsg x (0 = disabled, 1 = small message, 2 = large message)
//	Shows a console message to players with booster information when they connect.
booster_show_connmsg 1

// booster_autofps x (x = 0 to 1000, 0 = no target FPS)
//      Automatically changes value of sys_ticrate to achieve and maintain the desired server FPS (if possible).
//	It is not recommended to target FPS greater than 200 or so.
//	Note that autofps adjusts sys_ticrate, which makes it incompatible with any booster_lite_mode other
//	than 3. Setting booster_autofps will force booster_lite_mode to 3.
booster_autofps 200

// booster_minsleepms x (x = 1 to 10, 10 = no change to multimedia timer)
//      This adjusts the multimedia system timer to trick HLDS into sleeping for less time. Note that
//	the lower the value set, the higher the CPU consumption will be for HLDS. Values lower than 3
//	are not recommended, as they can cause massive CPU consumption and/or system instability.
booster_minsleepms 5

// booster_force_systicrate x (x = 0 to 10000, 0 = let Booster2 manage the value itself (no force))
//	Booster2 will force this sys_ticrate value. Note that using this option will set booster_autofps to 0
//	and booster_lite_mode to 3, as these methods rely on a sys_ticrate value untouched by user settings.
//	You should avoid directly setting sys_ticrate in your server.cfg, as manually adjusted values can
//	cause problems with various parts of Booster2.
booster_force_systicrate 0

// booster_cpu_enabled x [0 to 2] (0 = off, 1 = on, 2 = report CPU only - don't actively manage CPU)
//	Booster2 can monitor CPU usage and adjust the multimedia timer to reduce load when necessary
booster_cpu_enabled 0

// booster_cpu_spikemax x
//      If CPU management is enabled, number of times booster_cpu_spikelevel needs 
//	to be exceeded in order for mmtimer to increase and CPU load to be reduced.      
booster_cpu_spikemax 3

// booster_cpu_spikelevel x [0 to 100]
//	If CPU management is enabled, level which CPU utilization needs to exceed 
//      (booster_cpu_spikemax times) for mmtimer to increase and CPU load to be reduced.
booster_cpu_spikelevel 75

// booster_cpu_floor x [0 to 100] site cs.net
//	If CPU management is enabled, level which CPU utilization needs to stay under 
//      (for booster_cpu_quiettime seconds) for mmtimer to decrease and FPS to increase.
booster_cpu_floor 50

// booster_cpu_mminc x [1 to 10]
//	If CPU management is enabled, amount mmtimer will increment (Booster2 will also decrease
//      the mmtimer by 1 for every 5 minute period that booster_cpu_spikelevel is not exceeded.
booster_cpu_mminc 2

// booster_cpu_quiettime
//	Seconds required without CPU spike exceeding booster_cpu_floor before
//	mmtimer value is decreased by 1.
booster_cpu_quiettime 300

// booster_cpu_mmmin x [1 to 10]
//	If CPU management is enabled, Booster2 will never set the mmtimer below this value.
booster_cpu_mmmin 3

// booster_cpu_mmmax x [1 to 10]
//	If CPU management is enabled, Booster2 will never set the mmtimer above this value.
booster_cpu_mmmax 8

// booster_lite_mode x [0 to 3]
//	Controls how the Booster-Lite approach is implemented:
//	0 - HLDS sleeps 10ms if no network packets are received. If HLDS
//	    receives a packet, it stops sleeping. (this mode has been added
//	    to provide backward compatibility with how BL v1.00 worked).
//	1 - HLDS attempts to sleep 10ms. If a packet is received,
//	    HLDS stops sleeping. Otherwise it attempts to sleep another 10ms.
//	2 - HLDS attempts to sleep 50ms. If a packet is received, it stops sleeping.
//	3 - HLDS will sleep the standard amount (this value turns this feature off).
booster_lite_mode 3
    
// booster_lite_extra_sleep_frequency x
//	Forces HLDS server to sleep x milliseconds even if a packet is received.
//	This setting helps to lower CPU usage.
booster_lite_extra_sleep_frequency 0

// booster_stats_cpu_counter
// Sets the string Booster will use to query cpu performance. By default this is 
// "\Processor(_Total)\% Processor Time". Manually set this only if you need to
// support non-english counter names or to query a specific processor.
// This cvar is only used if booster_cpu_enabled is turned on.

// booster_stats_in_counter
// Sets the string Booster will use to query bandwidth in. By default this is 
// "\Network Interface(NDIS 5.0 driver)\Bytes Received/sec". Manually set this only
// if you need to support non-english counter names or to query a specific interface.
// This cvar is only used if booster_stats is turned on.

// booster_stats_out_counter
// Sets the string Booster will use to query bandwidth out. By default this is 
// "\Network Interface(NDIS 5.0 driver)\Bytes Sent/sec". Manually set this only
// if you need to support non-english counter names or to query a specific interface.
// This cvar is only used if booster_stats is turned on.

// booster_stats [0-1]
// This turns on statistics gathering. This options is not supported. See info at the end
// of the readme regarding this option.

// booster_trigger_cmd
// Sets a command to be executed the first time (during any given map) that CPU consumption
// trips booster_cpu_spikemax. This allows admins to do things such as turn off wallhack
// blocks or other CPU intensive systems under heavy load.

// booster_intping
// This is a read-only value, and holds the current average player ping.

// booster_extping
// This is a read-only value, and holds the current ping to the address set in booster_pingaddr.

// booster_pingaddr
// Sets the address (in IP format x.x.x.x) that Booster will ping once a minute. If no value is
// set, Booster won't ping anything. Pinging an external address is useful in helping determine
// latency issues. If clients are showing high ping, pings to a nearby router can help determine
// if the problem is close to the server or part of something that is beyond the administrator's
// control.
echo Boosting Serve Com sucesso by 206source!